{"version":3,"sources":["../src/echarts_ctrl.js"],"names":["MetricsPanelCtrl","_","echarts","EchartsCtrl","$scope","$injector","panelDefaults","EchartsOption","IS_MAP","map","USE_URL","USE_FAKE_DATA","fakeData","url","request","updateInterval","maps","defaults","panel","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","updateData","that","xmlhttp","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","UrlData","JSON","parse","responseText","open","send","$timeout","dataList","data","eval","IS_DATA_CHANGED","err","addEditorTab","System","import","getPanelPath","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","echartsData","setHeight","height","row","isString","parseInt","replace","style","myChart","init","importMap","setTimeout","resize","callInterval","timeout","result","func","callBack","interval","context","args","arguments","clearInterval","setInterval","apply","clear","setOption","renderingCompleted","templateUrl"],"mappings":"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","file":"echarts_ctrl.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\r\nimport _ from 'lodash';\r\nimport echarts from './libs/echarts.min';\r\nimport './libs/echarts-liquidfill.min';\r\nimport './libs/echarts-wordcloud.min';\r\nimport './libs/dark';\r\nimport './css/style.css!';\r\nimport './libs/bmap.js';\r\nimport './libs/getBmap.js';\r\n\r\nexport class EchartsCtrl extends MetricsPanelCtrl {\r\n\r\n    constructor($scope, $injector) {\r\n        super($scope, $injector);\r\n\r\n        const panelDefaults = {\r\n            EchartsOption: 'console.log(JSON.stringify(echartsData));\\n\\noption = {};',\r\n            IS_MAP: false,\r\n            map: '',\r\n            USE_URL: false,\r\n            USE_FAKE_DATA: true,\r\n            fakeData: '',\r\n            url: '',\r\n            request: '',\r\n            updateInterval: 10000\r\n        };\r\n\r\n        this.maps = ['世界', '中国', '北京'];\r\n\r\n        _.defaults(this.panel, panelDefaults);\r\n\r\n        this.events.on('data-received', this.onDataReceived.bind(this));\r\n        this.events.on('data-error', this.onDataError.bind(this));\r\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\r\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\r\n        this.events.on('panel-initialized', this.render.bind(this));\r\n\r\n        this.updateData();\r\n    }\r\n\r\n    //post请求\r\n    updateData() {\r\n        let that = this, xmlhttp;\r\n\r\n        if (window.XMLHttpRequest) {\r\n            xmlhttp = new XMLHttpRequest();\r\n        } else {\r\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\r\n        }\r\n\r\n        xmlhttp.onreadystatechange = function () {\r\n            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\r\n                that.UrlData = JSON.parse(xmlhttp.responseText);\r\n                that.onDataReceived();\r\n            }\r\n        };\r\n\r\n        if (that.panel.USE_URL && !that.panel.USE_FAKE_DATA && that.panel.url && that.panel.request) {\r\n            xmlhttp.open(\"POST\", that.panel.url, true);\r\n            xmlhttp.send(that.panel.request);\r\n        } else {\r\n            xmlhttp = null;\r\n        }\r\n\r\n        this.$timeout(() => { this.updateData(); }, that.panel.updateInterval);\r\n    }\r\n\r\n    onDataReceived(dataList) {\r\n        this.data = this.panel.USE_URL ? this.UrlData : dataList;\r\n\r\n        if (this.panel.USE_URL && this.panel.USE_FAKE_DATA && this.panel.fakeData) {\r\n            this.data = eval(this.panel.fakeData); // jshint ignore:line\r\n        }\r\n\r\n        this.IS_DATA_CHANGED = true;\r\n        this.render();\r\n        this.IS_DATA_CHANGED = false;\r\n    }\r\n\r\n    onDataError(err) {\r\n        this.render();\r\n    }\r\n\r\n    onInitEditMode() {\r\n        this.addEditorTab('数据', 'public/plugins/dxc-echarts-panel/partials/editer-metric.html', 2);\r\n        this.addEditorTab('Ecahrts配置', 'public/plugins/dxc-echarts-panel/partials/editor-echarts.html', 3);\r\n    }\r\n\r\n    importMap() {\r\n        if (!this.panel.IS_MAP) return;\r\n        switch (this.panel.map) {\r\n            case '世界':\r\n                System.import(this.getPanelPath() + 'libs/world.js');\r\n                break;\r\n            case '中国':\r\n                System.import(this.getPanelPath() + 'libs/china.js');\r\n                break;\r\n            case '北京':\r\n                System.import(this.getPanelPath() + 'libs/beijing.js');\r\n                break;\r\n            // case '百度地图':\r\n            //     System.import(this.getPanelPath() + 'libs/bmap.js');\r\n            //     System.import(this.getPanelPath() + 'libs/getBmap.js');\r\n            // break;\r\n            default:\r\n                break;\r\n        }\r\n    }\r\n\r\n    getPanelPath() {\r\n        // the system loader preprends publib to the url, add a .. to go back one level\r\n        return '../' + grafanaBootData.settings.panels[this.pluginId].baseUrl + '/';\r\n    }\r\n\r\n    link(scope, elem, attrs, ctrl) {\r\n        const $panelContainer = elem.find('.echarts_container')[0];\r\n        let option = {},\r\n            echartsData = [];\r\n\r\n        ctrl.IS_DATA_CHANGED = true;\r\n\r\n        function setHeight() {\r\n            let height = ctrl.height || panel.height || ctrl.row.height;\r\n            if (_.isString(height)) {\r\n                height = parseInt(height.replace('px', ''), 10);\r\n            }\r\n            // height -= 7;\r\n            // height -= ctrl.panel.title ? 25 : 9;\r\n            $panelContainer.style.height = height + 'px';\r\n        }\r\n\r\n        // function setWidth() {\r\n        //     let width = document.body.clientWidth;\r\n        //     width = (width - 5.6 * 2) * ctrl.panel.span / 12 - 5.6 * 2 - 1 * 2 - 10 * 2;\r\n        //     $panelContainer.style.width = width + 'px';\r\n        // }\r\n\r\n        setHeight();\r\n        // setWidth();\r\n\r\n        let myChart = echarts.init($panelContainer, 'dark');\r\n\r\n        ctrl.importMap();\r\n\r\n        // bad hank\r\n        setTimeout(function () {\r\n            myChart.resize();\r\n        }, 1000);\r\n\r\n        // 防止重复触发事件\r\n        var callInterval = function callInterval() {\r\n            var timeout, result;\r\n\r\n            function func(callBack, interval) {\r\n                var context = this; // jshint ignore:line\r\n                var args = arguments;\r\n\r\n                if (timeout) clearInterval(timeout);\r\n\r\n                timeout = setInterval(function () {\r\n                    result = callBack.apply(context, args);\r\n                }, interval);\r\n\r\n                return result;\r\n            }\r\n\r\n            return func;\r\n        }();\r\n\r\n        function render() {\r\n\r\n            if (!myChart) {\r\n                return;\r\n            }\r\n\r\n            setHeight();\r\n            myChart.resize();\r\n\r\n            if (ctrl.IS_DATA_CHANGED) {\r\n                myChart.clear();\r\n                echartsData = ctrl.data;\r\n\r\n                eval(ctrl.panel.EchartsOption); // jshint ignore:line\r\n\r\n                myChart.setOption(option);\r\n            }\r\n        }\r\n\r\n        this.events.on('render', function () {\r\n            render();\r\n            ctrl.renderingCompleted();\r\n        });\r\n    }\r\n}\r\n\r\nEchartsCtrl.templateUrl = 'module.html';\r\n"]}